package com.thinksns.sociax.adapter;import java.util.ArrayList;import java.util.List;import com.thinksns.sociax.gimgutil.AsyncImageLoader;import com.thinksns.sociax.t4.android.ThinksnsAbscractActivity;import com.thinksns.sociax.t4.exception.VerifyErrorException;import com.thinksns.sociax.t4.model.ModelChannel;import com.thinksns.sociax.android.R;import com.thinksns.sociax.thinksnsbase.bean.ListData;import com.thinksns.sociax.thinksnsbase.bean.SociaxItem;import com.thinksns.sociax.thinksnsbase.exception.*;import android.content.Context;import android.content.pm.PackageManager;import android.graphics.drawable.Drawable;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.TextView;public class ChannelAdapter extends SociaxListAdapter {	private List<SociaxItem> mList;	private Context mContext;	public static final int APP_PAGE_SIZE = 12;	private PackageManager pm;	public ChannelAdapter(ThinksnsAbscractActivity context,			ListData<SociaxItem> list) {		super(context, list);	}	public ChannelAdapter(ThinksnsAbscractActivity context,			ListData<SociaxItem> list, int page) {		super(context, list);		mContext = context;		pm = context.getPackageManager();		mList = new ArrayList<SociaxItem>();		int i = page * APP_PAGE_SIZE;		int iEnd = i + APP_PAGE_SIZE;		while ((i < list.size()) && (i < iEnd)) {			System.out.println(" index    " + i);			mList.add(list.get(i));			i++;		}	}	@Override	public int getCount() {		return mList.size();	}	@Override	public SociaxItem getItem(int position) {		return super.getItem(position);	}	@Override	public long getItemId(int position) {		return position;	}	@Override	public View getView(int position, View convertView, ViewGroup parent) {		ChannelHolder channelHolder = null;		if (convertView == null) {			View v = LayoutInflater.from(mContext).inflate(					R.layout.channel_item, null);			channelHolder = new ChannelHolder();			channelHolder.channelIcon = (ImageView) v					.findViewById(R.id.channel_icon);			channelHolder.channelName = (TextView) v					.findViewById(R.id.channel_name);			convertView = v;			v.setTag(channelHolder);		} else {			channelHolder = (ChannelHolder) convertView.getTag();		}		ModelChannel channel = (ModelChannel) mList.get(position);		channelHolder.channelName.setText(channel.getcName());		return convertView;	}	private AsyncImageLoader asyncImageLoader3 = new AsyncImageLoader();	private Drawable loadImage(final String url, final ImageView imageView) {		System.out.println("channel " + url);		if (url == null || url.equals("null")) {			return mContext.getResources().getDrawable(R.drawable.channel_d);		}		Drawable cacheImage = asyncImageLoader3.loadDrawable(url,				new AsyncImageLoader.ImageCallback() {					@Override					public void imageLoaded(Drawable imageDrawable) {						imageView.setImageDrawable(imageDrawable);					}					@Override					public Drawable returnImageLoaded(Drawable imageDrawable) {						return imageDrawable;					}				});		if (cacheImage != null) {			imageView.setImageDrawable(cacheImage);		}		return cacheImage;	}	@Override	public ListData<SociaxItem> refreshHeader(SociaxItem obj)			throws VerifyErrorException, ApiException, ListAreEmptyException,			DataInvalidException {		return null;	}	@Override	public ListData<SociaxItem> refreshFooter(SociaxItem obj)			throws VerifyErrorException, ApiException, ListAreEmptyException,			DataInvalidException {		return null;	}	@Override	public ListData<SociaxItem> refreshNew(int count)			throws VerifyErrorException, ApiException, ListAreEmptyException,			DataInvalidException {		return null;	}	class ChannelHolder {		ImageView channelIcon;		TextView channelName;	}}